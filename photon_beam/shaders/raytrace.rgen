/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */

#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference2 : require

#extension GL_EXT_ray_query : require


#extension GL_EXT_nonuniform_qualifier : enable


#include "raycommon.glsl"
#include "sampling.glsl"
#include "host_device.h"

// clang-format off
layout(location = 0) rayPayloadEXT rayHitPayload prd;

layout(set = 0, binding = 0) uniform accelerationStructureEXT beamAS;
layout(set = 0, binding = 1, rgba32f) uniform image2D image;
layout(set = 0, binding = 3) uniform accelerationStructureEXT surfaceAS;

layout(set = 0, binding = 4) readonly buffer _InstanceInfo {PrimMeshInfo primInfo[];};

layout(buffer_reference, scalar) readonly buffer Vertices  { vec3  v[]; };
layout(buffer_reference, scalar) readonly buffer Indices   { ivec3 i[]; };
layout(buffer_reference, scalar) readonly buffer Normals   { vec3  n[]; };
layout(buffer_reference, scalar) readonly buffer TexCoords { vec2  t[]; };
layout(std430, buffer_reference, scalar) readonly buffer Materials { GltfShadeMaterial m[]; };
layout(set = 1, binding = eSceneDesc ) readonly buffer SceneDesc_ { SceneDesc sceneDesc; };
layout(set = 1, binding = eTextures) uniform sampler2D texturesMap[]; // all textures

layout(set = 1, binding = 0) uniform _GlobalUniforms { GlobalUniforms uni; };
layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };
// clang-format on

void main()
{
    uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, 1);
    Indices   indices   = Indices(sceneDesc.indexAddress);
    Normals   normals   = Normals(sceneDesc.normalAddress);
    TexCoords texCoords = TexCoords(sceneDesc.uvAddress);
    Materials materials = Materials(sceneDesc.materialAddress);

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2       d           = inUV * 2.0 - 1.0;

    vec4 origin    = uni.viewInverse * vec4(0, 0, 0, 1);
    vec4 target    = uni.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = uni.viewInverse * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsNoneEXT;
    float tMin     = 0.001;
    float tMaxDefault = 10000.0;
    float tMax     = tMaxDefault;

    prd.hitValue     = vec3(0);
    prd.rayOrigin    = origin.xyz;
    prd.rayDirection = direction.xyz;

    vec3 secondRayDir;
    float       vDotN = 0;
    float halfVecPdfVal;
    float rayPdfVal;
    prd.weight = vec3(1.0);


    uint num_iteration = 2;
    for(int i=0; i < num_iteration; i ++)
    {
        // get the t value to surface
        rayQueryEXT rayQuery;
        rayQueryInitializeEXT(rayQuery,              // Ray query
                                surfaceAS,                  // Top-level acceleration structure
                                gl_RayFlagsOpaqueEXT,  // Ray flags, here saying "treat all geometry as opaque"
                                0xFF,                  // 8-bit instance mask, here saying "trace against all instances"
                                prd.rayOrigin,             // Ray origin
                                0.0,                   // Minimum t-value
                                prd.rayDirection,          // Ray direction
                                tMax);              // Maximum t-value

        // Start traversal, and loop over all ray-scene intersections. When this finishes,
        // rayQuery stores a "committed" intersection, the closest intersection (if any).
        rayQueryProceedEXT(rayQuery);
        tMax = rayQueryGetIntersectionTEXT(rayQuery, true);
        if (rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionNoneEXT)
        {
            prd.instanceIndex = -1;
            traceRayEXT(beamAS,        // acceleration structure
                    rayFlags,          // rayFlags
                    0xFF,              // cullMask
                    0,                 // sbtRecordOffset
                    0,                 // sbtRecordStride
                    0,                 // missIndex
                    prd.rayOrigin,     // ray origin
                    tMin,              // ray min range
                    prd.rayDirection,  // ray direction
                    tMax,              // ray max range
                    0                  // payload (location = 0)
            );

            // add clear colr if the ray has not hitted any solid surface
            
           prd.hitValue += prd.weight * pcRay.clearColor.xyz * 0.8;
            
            break;
        }
   
        prd.instanceIndex = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, true);
        const int primitiveID = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, true);

        PrimMeshInfo pinfo = primInfo[prd.instanceIndex];
        uint indexOffset  = (pinfo.indexOffset / 3) + rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, true);
        uint vertexOffset = pinfo.vertexOffset;           // Vertex offset as defined in glTF
        uint matIndex     = max(0, pinfo.materialIndex);  // material of primitive mesh

        // Getting the 3 indices of the triangle (local)
        ivec3 triangleIndex = indices.i[indexOffset];
        triangleIndex += ivec3(vertexOffset);  // (global)

        vec3 barycentrics = vec3(0.0, rayQueryGetIntersectionBarycentricsEXT(rayQuery, true));

        // Normal
        const vec3 nrm0         = normals.n[triangleIndex.x];
        const vec3 nrm1         = normals.n[triangleIndex.y];
        const vec3 nrm2         = normals.n[triangleIndex.z];
        vec3       normal       = normalize(nrm0 * barycentrics.x + nrm1 * barycentrics.y + nrm2 * barycentrics.z);
        const vec3 world_normal = normalize(vec3(normal * rayQueryGetIntersectionWorldToObjectEXT(rayQuery, true)));
        prd.hitNormal = world_normal;

        const vec2 uv0       = texCoords.t[triangleIndex.x];
        const vec2 uv1       = texCoords.t[triangleIndex.y];
        const vec2 uv2       = texCoords.t[triangleIndex.z];
        const vec2 texcoord0 = uv0 * barycentrics.x + uv1 * barycentrics.y + uv2 * barycentrics.z;

        GltfShadeMaterial mat       = materials.m[matIndex];   
        vec3  albedo    = mat.pbrBaseColorFactor.xyz;

        if(mat.pbrBaseColorTexture > -1)
        {
            uint txtId = mat.pbrBaseColorTexture;
            albedo *= texture(texturesMap[nonuniformEXT(txtId)], texcoord0).xyz;
        }

        prd.hitAlbedo = albedo;
        prd.hitMetallic = mat.metallic;
        prd.hitRoughness = mat.roughness;
        

        traceRayEXT(beamAS,        // acceleration structure
                    rayFlags,          // rayFlags
                    0xFF,              // cullMask
                    0,                 // sbtRecordOffset
                    0,                 // sbtRecordStride
                    0,                 // missIndex
                    prd.rayOrigin,     // ray origin
                    tMin,              // ray min range
                    prd.rayDirection,  // ray direction
                    tMax,              // ray max range
                    0                  // payload (location = 0)
        );

        if (i  + 1>= num_iteration)
            break;

        vec3 viewingDirection = -prd.rayDirection;
        if (mat.roughness > 0.01)
            break;

        prd.rayDirection = microfacetReflectedLightSampling(seed, prd.rayDirection, world_normal, mat.roughness);
        if(dot(world_normal, prd.rayDirection ) < 0)
            break;

        prd.rayOrigin = prd.rayOrigin - viewingDirection * tMax;
        prd.rayOrigin += prd.rayDirection;
        prd.weight *= pdfWeightedGltfBrdf(prd.rayDirection, viewingDirection, world_normal, albedo, mat.roughness, mat.metallic);
        tMax = tMaxDefault;

    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hitValue, 1.f));
    return;

}
