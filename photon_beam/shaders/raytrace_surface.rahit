/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */

#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require


#include "gltf.glsl"
#include "raycommon.glsl"
#include "sampling.glsl"
#include "host_device.h"

hitAttributeEXT vec3 beamHit;

// clang-format off
layout(location = 0) rayPayloadInEXT rayHitPayload prd;

layout(std430, set = 0, binding = 2) readonly buffer PhotonBeams{

    uint subBeamCount;
    uint beamCount;
    uint _padding_beams[2];
	PhotonBeam beams[];
};

layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };
// clang-format on


void main()
{
    PhotonBeam beam = beams[gl_InstanceCustomIndexEXT];

    if (prd.instanceIndex != beam.hitInstanceIndex)
    {
        ignoreIntersectionEXT;
        return;
    }

    if(pcRay.showDirectColor == 1)
    {
        prd.hitValue = prd.hitAlbedo;
        return;
    }

    vec3 worldPos = gl_WorldRayOriginEXT + gl_WorldRayDirectionEXT * gl_HitTEXT;
    vec3 towardLightDirection = normalize(beam.startPos - beam.endPos);
    float beamDist = length(beam.startPos - beam.endPos);
    float rayDist = gl_HitTEXT;
    vec3 vewingDirection = normalize(gl_WorldRayDirectionEXT) * -1.0;

    if (dot(towardLightDirection, prd.hitNormal) <= 0 || dot(vewingDirection, prd.hitNormal) <= 0)
    {   
        ignoreIntersectionEXT;
        return;
    }
    
    vec3 radiance = exp(-pcRay.airExtinctCoff * (rayDist + beamDist)) 
    * gltfBrdf(towardLightDirection, vewingDirection, prd.hitNormal, prd.hitAlbedo, prd.hitRoughness, prd.hitMetallic) 
    * beam.lightColor / float(pcRay.numPhotonSources) * dot(towardLightDirection, prd.hitNormal) / (pcRay.photonRadius * pcRay.photonRadius * M_PI);

    float pointDist = length(worldPos - beam.endPos);
    //prd.hitValue += radiance * exp(-pcRay.photonRadius * pointDist * pointDist);

    //prd.hitValue += prd.weight * radiance * (1 - pointDist / pcRay.photonRadius);
    //prd.hitValue += prd.weight * radiance;
    // becaureful and try not to insert zero value to pow function as the first parameter. EX: pow(0, x).
    prd.hitValue += prd.weight * radiance * pow((1 - (pointDist - 0.01) / pcRay.photonRadius), 0.5);

    ignoreIntersectionEXT;
}