

#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require


#include "raycommon.glsl"
#include "sampling.glsl"
#include "host_device.h"

// clang-format off
layout(location = 0) rayPayloadEXT hitPayload prd;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;

layout(std430, set = 0, binding = 1) restrict buffer PhotonBeams{

    uint beamCount;
    uint _padding_beams[3];
	PhotonBeam beams[];
};

layout(set = 1, binding = 0) uniform _GlobalUniforms { GlobalUniforms uni; };
layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };
// clang-format on

void main()
{
  float numLightSourceBeams = gl_LaunchSizeEXT.x * gl_LaunchSizeEXT.y * gl_LaunchSizeEXT.z;
  // Initialize the random number
  uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));

  vec3 hemiSphereNormal = vec3(0,0,1);
  if (rnd(seed) < 0.5)
    hemiSphereNormal.z = -1;

  vec3 rayDirection = samplingHemisphere(seed, vec3(1,0,0), vec3(0,1,0), hemiSphereNormal);

  uint  rayFlags = gl_RayFlagsOpaqueEXT;
  float tMin     = 0.001;
  float tMax     = 10000.0;

  float minmumLightIntensitySquare = 0.00001;

  prd.hitValue     = vec3(0);
  prd.seed         = seed;
  prd.depth        = 0;
  prd.rayOrigin    = pcRay.lightPosition;
  prd.rayDirection = rayDirection;
  prd.weight       = vec3(0);

  uint beamIndex;
  vec3 beamColor = vec3(pcRay.lightIntensity);
  vec3 rayOrigin = pcRay.lightPosition;

  for(; prd.depth < 10; prd.depth++)
  {
    traceRayEXT(topLevelAS,        // acceleration structure
                rayFlags,          // rayFlags
                0xFF,              // cullMask
                0,                 // sbtRecordOffset
                0,                 // sbtRecordStride
                0,                 // missIndex
                prd.rayOrigin,     // ray origin
                tMin,              // ray min range
                prd.rayDirection,  // ray direction
                tMax,              // ray max range
                0                  // payload (location = 0)
    );

    PhotonBeam newBeam;
    newBeam.startPos = rayOrigin;
    newBeam.endPos = prd.rayOrigin;
    newBeam.mediaIndex = 0;
    // newBeam.radius = pcRay.beamRadius;
    newBeam.radius = 0;
    newBeam.lightColor = beamColor / numLightSourceBeams;

    beamIndex = atomicAdd(beamCount, 1);
    if (beamIndex >= pcRay.numBeams)
        break;

    beams[beamIndex] = newBeam;

    vec3 beamVec = newBeam.endPos - newBeam.startPos;
    float beamLength = sqrt(dot(beamVec, beamVec));
    uint num_split = uint(beamLength / pcRay.beamRadius + 1.0);

    for(uint i=0; i < num_split; i++)
    {
        vec3 splitStart = newBeam.startPos + pcRay.beamRadius * float(i) * rayDirection;
        ShaderVkAccelerationStructureInstanceKHR asInfo;
        asInfo.instanceCustomIndexAndmask = (beamIndex << 8) | 0xFF;
        asInfo.instanceShaderBindingTableRecordOffsetAndflags = (0 << 24) | 0x00000001; // use the same hit group 0
        asInfo.accelerationStructureReference = pcRay.beamBlasAddres;
        asInfo.matrix[0][0] = 0.0;
        asInfo.matrix[0][1] = 0.0;
        asInfo.matrix[0][2] = rayDirection.x;
        asInfo.matrix[0][3] = splitStart.x;
        asInfo.matrix[1][0] = 0.0;
        asInfo.matrix[1][1] = 0.0;
        asInfo.matrix[1][2] = rayDirection.y;
        asInfo.matrix[1][3] = splitStart.y;
        asInfo.matrix[2][0] = 0.0;
        asInfo.matrix[2][1] = 0.0;
        asInfo.matrix[2][2] = rayDirection.y;
        asInfo.matrix[2][3] = splitStart.y;

    }

    beamColor *= prd.weight;
    rayOrigin = prd.rayOrigin;
    rayDirection = prd.rayDirection;

    // if light intensity is weak, assume the light has been absored and make a new light
    if (dot(beamColor, beamColor) < minmumLightIntensitySquare){
        break;
    }

  }

}
