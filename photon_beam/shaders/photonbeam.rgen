

#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

//#extension GL_EXT_debug_printf : require

#include "raycommon.glsl"
#include "sampling.glsl"
#include "host_device.h"

// clang-format off
layout(location = 0) rayPayloadEXT hitPayload prd;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;

layout(std430, set = 0, binding = 2) restrict buffer PhotonBeams{

    uint subBeamCount;
    uint beamCount;
    uint _padding_beams[2];
	PhotonBeam beams[];
};

layout(std430, set = 0, binding = 3) restrict buffer PhotonBeamsAs{
	ShaderVkAccelerationStructureInstanceKHR subBeams[];
};

layout(set = 1, binding = 0) uniform _GlobalUniforms { GlobalUniforms uni; };
layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };
// clang-format on

void main()
{

  uint launchIndex = gl_LaunchSizeEXT.y * gl_LaunchSizeEXT.z * gl_LaunchIDEXT.x 
        + gl_LaunchSizeEXT.z * gl_LaunchIDEXT.y + gl_LaunchIDEXT.z;

  // Initialize the random number
  prd.seed = tea(launchIndex, int(clockARB()));

  vec3 rayDirection = uniformSamplingSphere(prd.seed);

  uint  rayFlags = gl_RayFlagsOpaqueEXT;
  float tMin     = 0.001;
  float tMax     = 10000.0;

  float minmumLightIntensitySquare = 0.0001;

  prd.rayOrigin    = pcRay.lightPosition;
  prd.rayDirection = rayDirection;
  prd.weight       = vec3(0);

  uint beamIndex;
  uint subBeamIndex;
  vec3 beamColor = pcRay.sourceLight;
  vec3 rayOrigin = pcRay.lightPosition;

  while(true)
  {
    traceRayEXT(topLevelAS,        // acceleration structure
                rayFlags,          // rayFlags
                0xFF,              // cullMask
                0,                 // sbtRecordOffset
                0,                 // sbtRecordStride
                0,                 // missIndex
                prd.rayOrigin,     // ray origin
                tMin,              // ray min range
                prd.rayDirection,  // ray direction
                tMax,              // ray max range
                0                  // payload (location = 0)
    );

    PhotonBeam newBeam;
    newBeam.startPos = rayOrigin;
    newBeam.endPos = prd.rayOrigin;
    newBeam.mediaIndex = 0;
    // newBeam.radius = pcRay.beamRadius;
    newBeam.radius = 0;
    newBeam.lightColor = beamColor;
    newBeam.hitInstanceIndex = prd.instanceIndex;

    beamIndex = atomicAdd(beamCount, 1);
    if (beamIndex >= pcRay.maxNumBeams)
        break;

    beams[beamIndex] = newBeam;

    vec3 beamVec = newBeam.endPos - newBeam.startPos;
    float beamLength = sqrt(dot(beamVec, beamVec));

    uint num_split = uint(beamLength / (pcRay.beamRadius * 2.0f) + 1.0f);
    if (num_split * pcRay.beamRadius * 2.0 <= beamLength)
        num_split += 1;

     // this value must be either 0 or 1
    uint numSurfacePhoton =  (prd.instanceIndex >= 0 )? 1: 0;

    if (launchIndex  >= pcRay.numBeamSources)
        num_split = 0;

    if (launchIndex  >= pcRay.numPhotonSources)
        numSurfacePhoton = 0;
    
    if (numSurfacePhoton + num_split < 1)
        return;
    
    subBeamIndex = atomicAdd(subBeamCount, num_split + numSurfacePhoton);

    // Not using min function with subtraction operator to simplify the if statement
    // because subtraction between unsinged integer values can cause overflow.
    if (subBeamIndex >= pcRay.maxNumSubBeams)
    {
        return;
    }
    else if (subBeamIndex + numSurfacePhoton >= pcRay.maxNumSubBeams)
    {
        num_split = 0;
    }
    else if (num_split + subBeamIndex + numSurfacePhoton >= pcRay.maxNumSubBeams)
    {
        num_split = (pcRay.maxNumSubBeams - subBeamIndex - numSurfacePhoton);
    }

    vec3 tangent, bitangent;
    createCoordinateSystem(rayDirection, tangent, bitangent);
   
    for(uint i=0; i < num_split; i++)
    {
        vec3 splitStart = newBeam.startPos + pcRay.beamRadius * 2 * float(i) * rayDirection;
        ShaderVkAccelerationStructureInstanceKHR asInfo;
        asInfo.instanceCustomIndexAndmask = beamIndex | (0xFF << 24);
        asInfo.instanceShaderBindingTableRecordOffsetAndflags = (mdAir) | (0x00000001 << 24); // use the hit group 0
        asInfo.accelerationStructureReference = pcRay.beamBlasAddress;
        asInfo.matrix[0][0] = bitangent.x * pcRay.beamRadius;
        asInfo.matrix[0][1] = tangent.x * pcRay.beamRadius;
        asInfo.matrix[0][2] = rayDirection.x * pcRay.beamRadius;
        asInfo.matrix[0][3] = splitStart.x;
        asInfo.matrix[1][0] = bitangent.y * pcRay.beamRadius;
        asInfo.matrix[1][1] = tangent.y * pcRay.beamRadius;
        asInfo.matrix[1][2] = rayDirection.y * pcRay.beamRadius;
        asInfo.matrix[1][3] = splitStart.y;
        asInfo.matrix[2][0] = bitangent.z * pcRay.beamRadius;
        asInfo.matrix[2][1] = tangent.z * pcRay.beamRadius;
        asInfo.matrix[2][2] = rayDirection.z * pcRay.beamRadius;
        asInfo.matrix[2][3] = splitStart.z;

        subBeams[subBeamIndex + i] = asInfo;
    }

    if (numSurfacePhoton > 0) 
    {
        vec3 boxStart = newBeam.endPos;
        ShaderVkAccelerationStructureInstanceKHR asInfo;
        asInfo.instanceCustomIndexAndmask = beamIndex | (0xFF << 24);
        asInfo.instanceShaderBindingTableRecordOffsetAndflags = (mdSolid) | (0x00000001 << 24); // use the hit group 1
        asInfo.accelerationStructureReference = pcRay.photonBlasAddress;

        createCoordinateSystem(prd.hitNormal, tangent, bitangent);
        
        asInfo.matrix[0][0] = bitangent.x * pcRay.photonRadius;
        asInfo.matrix[0][1] = prd.hitNormal.x * pcRay.photonRadius;
        asInfo.matrix[0][2] = tangent.x * pcRay.photonRadius;
        asInfo.matrix[0][3] = boxStart.x;
        asInfo.matrix[1][0] = bitangent.y * pcRay.photonRadius;
        asInfo.matrix[1][1] = prd.hitNormal.y * pcRay.photonRadius;
        asInfo.matrix[1][2] = tangent.y * pcRay.photonRadius;
        asInfo.matrix[1][3] = boxStart.y;
        asInfo.matrix[2][0] = bitangent.z * pcRay.photonRadius;
        asInfo.matrix[2][1] = prd.hitNormal.z * pcRay.photonRadius;
        asInfo.matrix[2][2] = tangent.z * pcRay.photonRadius;
        asInfo.matrix[2][3] = boxStart.z;

        subBeams[subBeamIndex + num_split] = asInfo;
    }

    if (subBeamIndex + num_split  + numSurfacePhoton >= pcRay.maxNumSubBeams)
        return;

    beamColor *= prd.weight;
    rayOrigin = prd.rayOrigin;
    rayDirection = prd.rayDirection;

    // if light intensity is weak, assume the light has been absored and make a new light
    if (max(max(beamColor.x, beamColor.y), beamColor.z) < minmumLightIntensitySquare){
        return;
    }
  }

}
