
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require


#include "gltf.glsl"
#include "raycommon.glsl"
#include "sampling.glsl"
#include "host_device.h"

hitAttributeEXT vec2 attribs;

layout(std430, set = 0, binding = 2) readonly buffer PhotonBeams{

    uint subBeamCount;
    uint beamCount;
    uint _padding_beams[2];
	PhotonBeam beams[];
};

layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };
// clang-format on


void main()
{
    vec3 rayOrigin    = gl_WorldRayOriginEXT;
    vec3 rayDirection = gl_WorldRayDirectionEXT;
    const vec3 rayEnd = rayOrigin + rayDirection * gl_RayTmaxEXT;
    float rayLength = gl_RayTmaxEXT;

    PhotonBeam beam = beams[gl_InstanceCustomIndexEXT];

    vec3 beamDirection = normalize(beam.endPos - beam.startPos);
    float beamLength = length(beam.endPos - beam.startPos);
    const vec3 rayBeamCross = cross(rayDirection, beamDirection);
    vec3 norm1 = cross(rayDirection, rayBeamCross);
    vec3 norm2 = cross(beamDirection, rayBeamCross); 

    // get the nearest points between camera ray and beam
    vec3 rayPoint = rayOrigin + dot(beam.startPos - rayOrigin, norm2) / dot(rayDirection, norm2) * rayDirection;
    vec3 beamPoint = beam.startPos + dot(rayOrigin - beam.startPos, norm1) / dot(beamDirection, norm1) * beamDirection;

    float rayPointAt = dot(rayPoint - rayOrigin, rayDirection); 
    float beamPointAt = dot(beamPoint - beam.startPos, beamDirection);
  
    if(rayPointAt < 0 && beamPointAt < 0)
    {
        rayPoint = rayOrigin;
        beamPoint = beam.startPos;
    }
    else if(rayPointAt> rayLength && beamPointAt > beamLength)
    {
        rayPoint = rayEnd;
        beamPoint = beam.endPos;
    }
    else if(rayPointAt < 0 && beamPointAt > beamLength)
    {
        rayPoint = rayOrigin;
        beamPoint = beam.endPos;
    }
    else if(rayPointAt > rayLength &&  beamPointAt < 0)
    {
        rayPoint = rayEnd;
        beamPoint = beam.startPos;
    }
    else if(rayPointAt < 0)
    {
        rayPoint = rayOrigin;
        beamPoint = beam.startPos + beamDirection * dot(rayPoint - beam.startPos, beamDirection);
    }
    else if(rayPointAt > rayLength)
    {
        rayPoint = rayEnd;
        beamPoint = beam.startPos + beamDirection * dot(rayPoint - beam.startPos, beamDirection);
    }
    else if(beamPointAt < 0)
    {
        beamPoint = beam.startPos;
        rayPoint = rayOrigin + rayDirection * dot(beamPoint - rayOrigin, rayDirection);
    }
    else if(beamPointAt > beamLength)
    {
        beamPoint = beam.endPos;
        rayPoint = rayOrigin + rayDirection * dot(beamPoint - rayOrigin, rayDirection);
    }

    // return none if the distance between the nearest points is longer than the beam radius
    if(length(beamPoint - rayPoint) <  pcRay.beamRadius)
        return;

    float beamBoxStartAt = length(vec3(gl_ObjectToWorldEXT * vec4(0.0,0.0,0.0, 1.0)) - beam.startPos);
    beamPointAt = length(beamPoint - beam.startPos);

    // return none if this subbeam does not contain the beam point
    if(beamPointAt < beamBoxStartAt || beamBoxStartAt + pcRay.beamRadius * 2 <= beamPointAt)
        return;

    rayPointAt = length(rayPoint - rayOrigin);
    reportIntersectionEXT(rayPointAt, 0);
}
