
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require


#extension GL_EXT_debug_printf : require

#include "gltf.glsl"
#include "raycommon.glsl"
#include "sampling.glsl"
#include "host_device.h"

hitAttributeEXT vec3 beamHit;

layout(std430, set = 0, binding = 2) readonly buffer PhotonBeams{

    uint subBeamCount;
    uint beamCount;
    uint _padding_beams[2];
	PhotonBeam beams[];
};

layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };
// clang-format on


void main()
{
    vec3 rayOrigin    = gl_WorldRayOriginEXT;
    vec3 rayDirection = gl_WorldRayDirectionEXT;
    const vec3 rayEnd = rayOrigin + rayDirection * gl_RayTmaxEXT;
    float rayLength = gl_RayTmaxEXT - 0.0001;

    PhotonBeam beam = beams[gl_InstanceCustomIndexEXT];

    vec3 beamDirection = normalize(beam.endPos - beam.startPos);
    float beamLength = length(beam.endPos - beam.startPos);
    const vec3 rayBeamCross = cross(rayDirection, beamDirection);


    // check if the ray hits beam cylinder when the beam cylinder has infinite radius
    float rayStartOnBeamAt = dot(beamDirection, rayOrigin - beam.startPos);
    float rayEndOnBeamAt = dot(beamDirection, rayEnd - beam.startPos);

    if((rayStartOnBeamAt < 0 && rayEndOnBeamAt < 0) || (beamLength < rayStartOnBeamAt && beamLength < rayEndOnBeamAt))
    {
        return;
    }


    //if ray and beam are parallel or almost parallel
    // Need to choose the beam point that gives shortest ray length
    if (length(rayBeamCross) <  0.1e-4)
    {
        
        float beamEndOnRayAt = min(rayLength, max(0, dot(beam.endPos - rayOrigin, rayDirection)));
        float beamStartOnRayAt = min(rayLength, max(0, dot(beam.startPos - rayOrigin, rayDirection)));

        vec3 rayPoint = rayOrigin + rayDirection * min(beamEndOnRayAt, beamStartOnRayAt);
        vec3 beamPoint = beam.startPos + beamDirection * dot(rayPoint - beam.startPos, beamDirection);

        if(length(beamPoint - rayPoint) >  pcRay.beamRadius)
        {
            return;
        }

        beamHit = beamPoint;
        reportIntersectionEXT(length(rayPoint - rayOrigin), 0);
        return;
    }

    vec3 norm1 = cross(rayDirection, rayBeamCross);
    vec3 norm2 = cross(beamDirection, rayBeamCross); 

    // get the nearest points between camera ray and beam
    vec3 rayPoint = rayOrigin + dot(beam.startPos - rayOrigin, norm2) / dot(rayDirection, norm2) * rayDirection;
    vec3 beamPoint = beam.startPos + dot(rayOrigin - beam.startPos, norm1) / dot(beamDirection, norm1) * beamDirection;

    float rayPointAt = dot(rayPoint - rayOrigin, rayDirection); 
    float beamPointAt = dot(beamPoint - beam.startPos, beamDirection);

    if(beamPointAt < 0)
    {
        beamPoint = beam.startPos;
    }
    else if(beamPointAt > beamLength)
    {
        beamPoint = beam.endPos;
    }
  
    if(rayPointAt < 0)
    {
        rayPoint = rayOrigin;
    }
    else if(rayPointAt > rayLength)
    {
        rayPoint = rayEnd;
    }

    if (beamPointAt < 0 || beamLength < beamPointAt)
    {
        rayPoint = rayOrigin + rayDirection * min(max(0.0f, dot(rayDirection, beamPoint - rayOrigin)), rayLength);
    }

    if(rayPointAt < 0 || rayLength < rayPointAt)
    {
        beamPoint = beam.startPos + beamDirection + min(max(0.0f, dot(beamDirection, rayPoint - beam.startPos)), beamLength);
    }

    // Now check if ray is intersecting with this sub beam.
    float beamBoxStartAt = length(vec3(gl_ObjectToWorldEXT * vec4(0.0,0.0,0.0, 1.0)) - beam.startPos);
    beamPointAt = length(beamPoint - beam.startPos);
    if(beamPointAt < beamBoxStartAt || beamBoxStartAt + pcRay.beamRadius * 2 <= beamPointAt)
    {
       return;
    }

    // check if ray point is within the beam radius
    if(length(beamPoint - rayPoint) >  pcRay.beamRadius)
    {
        return;
    }

    beamHit = beamPoint;
    reportIntersectionEXT(length(rayPoint - rayOrigin), 0);
}
