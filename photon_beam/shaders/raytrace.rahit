/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */

#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require


#include "gltf.glsl"
#include "raycommon.glsl"
#include "sampling.glsl"
#include "host_device.h"

hitAttributeEXT vec3 beamHit;

// clang-format off
layout(location = 0) rayPayloadInEXT rayHitPayload prd;

layout(std430, set = 0, binding = 2) readonly buffer PhotonBeams{

    uint subBeamCount;
    uint beamCount;
    uint _padding_beams[2];
	PhotonBeam beams[];
};

layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };
// clang-format on


void main()
{
    PhotonBeam beam = beams[gl_InstanceCustomIndexEXT];

    if(pcRay.showDirectColor == 1)
    {
        prd.hitValue = beam.lightColor  / max(max(beam.lightColor.x, beam.lightColor.y), beam.lightColor.z);
        return;
    }    

    vec3 worldPos = gl_WorldRayOriginEXT + gl_WorldRayDirectionEXT * gl_HitTEXT;
    float beamDist = length(beamHit - beam.startPos);
    vec3 beamDirection = normalize(beam.endPos - beam.startPos);
    float rayDist = gl_HitTEXT;
    vec3 vewingDirection = normalize(gl_WorldRayDirectionEXT) * -1.0;

    // the target radiance direction is -1.0 * gl_WorldRayDirectionEXT, opposite of the camera ray
    float beamRayCosVal = dot(-gl_WorldRayDirectionEXT, beamDirection);
    float beamRayAbsSinVal = sqrt(1 - beamRayCosVal * beamRayCosVal);
 
    vec3 radiance = pcRay.airScatterCoff * exp(-pcRay.airExtinctCoff * (rayDist + beamDist)) * heneyGreenPhaseFunc(beamRayCosVal, pcRay.airHGAssymFactor)  
    * beam.lightColor / float(pcRay.numBeamSources) / (pcRay.beamRadius * beamRayAbsSinVal + 0.1e-10);

    float rayBeamCylinderCenterDist = length(cross(worldPos - beam.startPos, beamDirection));
    //prd.hitValue += prd.weight * radiance * exp(-pcRay.beamRadius * rayBeamCylinderCenterDist * rayBeamCylinderCenterDist);

    //prd.hitValue += prd.weight * radiance * pow((1.1 - rayBeamCylinderCenterDist / pcRay.beamRadius), 2.2);
    prd.hitValue += prd.weight * radiance * pow((1.1 - rayBeamCylinderCenterDist / pcRay.beamRadius), 0.5);

    //prd.hitValue += prd.weight * radiance * (1.1 - rayBeamCylinderCenterDist / pcRay.beamRadius);
    //prd.hitValue += prd.weight * radiance * exp(-rayBeamCylinderCenterDist / pcRay.beamRadius);
    //prd.hitValue += prd.weight * radiance;

    ignoreIntersectionEXT;
}